from aiogram import types
from filters import IsPrivate, IsSubscriber
from keyboards.default import kb_menu
from loader import dp
from states.balance import balance_state
from utils.db_api import quick_commands as commands
from aiogram.dispatcher import FSMContext
from keyboards.inline import balance_kb

from loader import bot




@dp.message_handler(IsPrivate(), IsSubscriber(), text='–ë–∞–ª–∞–Ω—Åüí∞')
async def change_balance(message: types.Message):
    user = await commands.select_user(message.from_user.id)
    try:
        if user.first_name != '0' or user == message.from_user.id:
            await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}'
                                 f' –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?', reply_markup=balance_kb)
    except Exception:
        await message.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')



@dp.callback_query_handler(text='–Ω–µ—Ç_')
async def edit_balance(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='–ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω')
    await callback.answer('')


@dp.callback_query_handler(text='–¥–∞_')
async def edit_balance(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
    await balance_state.amound.set()
    await callback.answer('')




@dp.message_handler(IsPrivate(), state=balance_state.amound)
async def change_balance_(message: types.Message, state: FSMContext):
    answer = message.text
    check_balance = await commands.check_balance(user_id=message.from_user.id, amound=answer)
    if check_balance == 'no money':
        await message.answer('–ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç', reply_markup=kb_menu)
        await state.finish()
    elif check_balance:
        await message.answer('–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω', reply_markup=kb_menu)
        await state.finish()
    elif not check_balance:
        await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
        await state.finish()
    else:
        await message.answer('–û—à–∏–±–∫–∞ , –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        await state.finish()
